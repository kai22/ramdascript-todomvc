
(import '../model' model)
(import '../util' util)
(import 'react-dom-factories' d)

// Todo item view
(def Item (fn [todo]
    (d.li {:className (getItemCls todo)} [
        (d.div {:className 'view'} [
            (d.input {
                : className 'toggle'
                : type      'checkbox'
                : checked   todo.completed
                : onChange  (handleItemCheck todo) })
            (d.label {
                : className 'completed'
                : onDoubleClick (handleLabelDoubleClick todo) }
                todo.title)
            (d.button {
                : className 'destroy'
                : onClick   (handleDestroyClick todo) })])
        (d.input {
            : className 'edit'
            : value     (model.stateGet 'editingText')
            : onChange  handleInputChange
            : onKeyDown handleInputKeydown
            : onBlur    commitChanges }) ])))


(def handleItemCheck (fn [todo e]
    (model.toggle todo e.target.checked)))


(def handleDestroyClick (fn [todo e]
    (model.destroy todo)))

// whether a tod is being edited
(def isBeingEdited
    (propSatisfies
        (fn [id]
            (equals (model.stateGet 'editing') id)) 'id'))


(def getItemEditingCls
    (cond [
        [isBeingEdited (always 'editing ')]
        [T             (always '')]]))


(def getItemCompletedCls
    (cond [
        [(propEq 'completed' true) (always 'completed ')]
        [T                         (always '')]]))

// get items css classes
(def getItemCls
    (converge
        concat
        [getItemCompletedCls getItemEditingCls]))

// on start editing a todo
(def handleLabelDoubleClick (fn [todo, e]
    (model.state
        (merge
            (model.state) {
            : 'editingText' todo.title
            : 'editing'     todo.id }))))

// when editing a todo
(def handleInputChange
    (pipe
        (path ['target' 'value'])
        (model.stateSet 'editingText')))

// commit changes when editing a todo
(def commitChanges (fn []
    (model.state
        (merge
            (model.state) {
            : editing nil
            : todos (map
                        (ifElse
                            (propEq 'id'   (model.stateGet 'editing'))
                            (assoc 'title' (model.stateGet 'editingText'))
                            (identity))
                        (model.stateGet 'todos')) }))))


(def cancelChanges (fn []
    (model.stateSet 'editing' nil)))


(def handleInputKeydown
    (cond [
        [(both
            (propEq 'keyCode' util.ENTER_KEY)
            (fn [] (not (isEmpty (model.stateGet 'editingText'))))) commitChanges]
        [(propEq 'keyCode' util.ESCAPE_KEY)                        cancelChanges]]))