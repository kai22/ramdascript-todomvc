// Generated by RamdaScript 0.2.1

;(function () {

var storage = app.storage

var appData = R.defaultTo({
        title : '',
        todos : [],
        filter : '',
        editing : null,
        editingText : ''
    })

var state = flyd.stream(
    appData(
        storage.get()))

var todos = function () {
    return stateGet('todos')
}

var stateGet = R.curry(function (key) {
    return R.prop(key, 
        state())
})

var stateSet = R.curry(function (key, data) {
    return state(
        R.assoc(key, data, 
            state()))
})

var lastId = 0

var rand = function () {
    return R.slice(2, 12, 
        R.toString(
            Math.random()))
}

var idPrefix = R.concat(
    rand(), 
    rand())

var genId = function () {
    return R.concat(idPrefix, 
        (function ($val) { return lastId = $val })(R.inc(lastId)))
}

var toggle = R.curry(function (todo, completed) {
    return stateSet('todos', 
        R.map(
            R.cond([
                    [
                        R.propEq('id', todo.id),
                        R.assoc('completed', completed)
                    ],
                    [
                        R.T,
                        R.identity
                    ]
                ]), 
            todos()))
})

var destroy = R.curry(function (todo) {
    return stateSet('todos', 
        R.reject(
            R.propEq('id', todo.id), 
            todos()))
})

var destroyCompleted = function () {
    return stateSet('todos', 
        R.reject(
            R.propEq('completed', true), 
            todos()))
}

var toggleAll = R.curry(function (completed) {
    return stateSet('todos', 
        R.map(
            R.assoc('completed', completed), 
            todos()))
})

var getTodos = function () {
    return R.call(
        R.cond([
                [
                    R.equals(''),
                    todos
                ],
                [
                    R.equals('completed'),
                    R.compose(
                        R.filter(
                            R.propEq('completed', true)), todos)
                ],
                [
                    R.equals('active'),
                    R.compose(
                        R.filter(
                            R.propEq('completed', false)), todos)
                ]
            ]), 
        stateGet('filter'))
}

var addTodo = R.curry(function (t) {
    return state(
        R.merge(
            state(), {
                title : '',
                todos : R.append({
                        id : genId(),
                        title : t,
                        completed : false
                    }, 
                    stateGet('todos'))
            }))
})

flyd.on(
    R.curry(function (data) {
        return storage.save(data)
    }), state)

app = R.merge(app, {
        state : state,
        stateGet : stateGet,
        stateSet : stateSet,
        toggle : toggle,
        toggleAll : toggleAll,
        destroy : destroy,
        destroyCompleted : destroyCompleted,
        toggleAll : toggleAll,
        getTodos : getTodos,
        addTodo : addTodo
    })

})()